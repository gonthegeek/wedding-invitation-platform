rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User documents - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Wedding documents
    match /weddings/{weddingId} {
      // Public read access for guest invitations
      allow read: if true;
      
      // Write access for couples (owners) and admins
      allow write: if request.auth != null && 
        (resource.data.coupleId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Create access for authenticated users
      allow create: if request.auth != null;
    }

    // Guest documents
    match /guests/{guestId} {
      // Allow public read access for RSVP functionality (guests need to read their own data)
      allow read: if true;
      
      // Allow couples to read all guests for their wedding
      allow read: if request.auth != null && (
        get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.coupleId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Allow guests to update their own RSVP data (for RSVP submissions)
      allow update: if true;
      
      // Wedding couples and admins can manage guests
      allow write: if request.auth != null && (
        get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.coupleId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Allow creation of guests by couples
      allow create: if request.auth != null;
    }

    // Guest Groups
    match /guestGroups/{groupId} {
      // Allow couples to read all guest groups for their wedding
      allow read: if request.auth != null && (
        get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.coupleId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Wedding couples and admins can manage guest groups
      allow write: if request.auth != null && (
        get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.coupleId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Allow creation of guest groups by couples
      allow create: if request.auth != null;
    }

    // RSVP documents
    match /rsvps/{rsvpId} {
      // Couples can read all RSVPs for their wedding
      allow read: if request.auth != null && (
        get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.coupleId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Anyone can create RSVPs (for guest submissions)
      // Couples and admins can update
      allow write: if request.auth != null;
      allow create: if true; // Allow unauthenticated RSVP submissions
    }

    // Wedding party documents (temporarily more permissive for debugging)
    match /weddingParty/{partyId} {
      // Public read for invitation display
      allow read: if true;
      
      // Allow authenticated users to manage wedding party members
      // TODO: Restrict this to only wedding couples and admins in production
      allow write, delete: if request.auth != null;
    }

    // Gift registry documents
    match /giftRegistry/{registryId} {
      // Public read for guests
      allow read: if true;
      
      // Only wedding couples and admins can manage
      allow write: if request.auth != null && 
        (get(/databases/$(database)/documents/weddings/$(resource.data.weddingId)).data.coupleId == request.auth.uid ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Notification documents
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // System can create notifications, users can update read status
      allow write: if request.auth != null;
    }
  }
}
